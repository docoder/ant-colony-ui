"use strict";var precacheConfig=[["/ant-colony-ui/index.html","1006defd41406378259990d31be5b887"],["/ant-colony-ui/static/css/main.167a41fd.css","c7de8a60bbeed2bcea447145eb6b2b90"],["/ant-colony-ui/static/js/0.fd17150a.chunk.js","35a4d4860d3e05c2c93b531994bc890e"],["/ant-colony-ui/static/js/1.bdddb746.chunk.js","36d66e249f563488e82522f8077acee3"],["/ant-colony-ui/static/js/10.65b2b10e.chunk.js","52df64927ee3aa5c78f60f212e0842d5"],["/ant-colony-ui/static/js/2.9491bebb.chunk.js","7933063ab409ba8ff880f875bf355cd0"],["/ant-colony-ui/static/js/3.7c021068.chunk.js","152ba775085c2ea129c19bf033169af4"],["/ant-colony-ui/static/js/4.3d86cbec.chunk.js","600e65591cdabd45e66ecdf9a93227e1"],["/ant-colony-ui/static/js/5.63b0e5dc.chunk.js","57646e86a9cbd390a56ee7036da78e5f"],["/ant-colony-ui/static/js/6.7a065949.chunk.js","4cc698f63ca691888ed70e690a365f0f"],["/ant-colony-ui/static/js/7.511f4424.chunk.js","c0b1b382ee087133a3fc407b4b8c30aa"],["/ant-colony-ui/static/js/8.03449c2f.chunk.js","49b51ebf0dd7124a4eb41839c52a0862"],["/ant-colony-ui/static/js/9.eaaaa40d.chunk.js","b44dc8150dd4ef3097ba121918290aba"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var n=new URL(e);return"/"===n.pathname.slice(-1)&&(n.pathname+=t),n.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,n,a){var r=new URL(e);return a&&r.pathname.match(a)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(n)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var n=new URL(t).pathname;return e.some(function(e){return n.match(e)})},stripIgnoredUrlParameters=function(e,n){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return n.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],n=e[1],a=new URL(t,self.location),r=createCacheKey(a,hashParamName,n,/\.\w{8}\./);return[a.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(a){return setOfCachedUrls(a).then(function(n){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!n.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return a.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var n=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!n.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,n=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),a="index.html";(e=urlsToCacheKeys.has(n))||(n=addDirectoryIndex(n,a),e=urlsToCacheKeys.has(n));var r="/ant-colony-ui/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(n=new URL(r,self.location).toString(),e=urlsToCacheKeys.has(n)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(n)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});